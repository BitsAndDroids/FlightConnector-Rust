import { CustomEventHandler } from "@/utils/CustomEventHandler";
import { beforeEach, describe, expect, test, vi } from "vitest";
import { getEventData, getSettingsData } from "./BugReportParser";
import { ConnectorSettingsHandler } from "@/utils/connectorSettingsHandler";

describe("BugReportParser", async () => {
  let customEventHandler: any;
  let connectorSettingsHandler: any;
  let runSettingsHandler: any;
  vi.mock("@/utils/CustomEventHandler", () => {
    const CustomEventHandler = vi.fn();
    CustomEventHandler.prototype.getAllEvents = vi.fn();
    return { CustomEventHandler };
  });
  vi.mock("@/utils/connectorSettingsHandler", () => {
    const ConnectorSettingsHandler = vi.fn();
    ConnectorSettingsHandler.prototype.getAllConnectorSettings = vi.fn();
    return { ConnectorSettingsHandler };
  });
  beforeEach(() => {
    customEventHandler = new CustomEventHandler();
    connectorSettingsHandler = new ConnectorSettingsHandler();
    runSettingsHandler = new ConnectorSettingsHandler();
  });
  test("Should filter events with id > 3000", async () => {
    const mockEvents = [{ id: 2000 }, { id: 4000 }, { id: 5000 }];
    customEventHandler.getAllEvents.mockResolvedValue(mockEvents);
    const result = await getEventData();
    expect(customEventHandler.getAllEvents).toHaveBeenCalled();
    expect(result).toEqual(JSON.stringify(mockEvents.slice(1)));
  });
  test("Should format settings data", async () => {
    const mockConnectors = [{ id: 1 }, { id: 2 }];
    const mockRunSettings = [{ id: 1 }, { id: 2 }];
    const connectorSettingsHandler = vi.fn();
    connectorSettingsHandler.prototype.getAllConnectorSettings = vi.fn();
    const runSettingsHandler = vi.fn();
    runSettingsHandler.prototype.getAllRunSettings = vi.fn();
    vi.mock("@/utils/runSettingsHandler", () => {
      return { RunSettingsHandler: runSettingsHandler };
    });
    connectorSettingsHandler.getAllConnectorSettings.mockResolvedValue(
      mockConnectors,
    );
    runSettingsHandler.getAllRunSettings.mockResolvedValue(mockRunSettings);
    const result = await getSettingsData();
    expect(connectorSettingsHandler.getAllConnectorSettings).toHaveBeenCalled();
    expect(runSettingsHandler.getAllRunSettings).toHaveBeenCalled();
    expect(result).toEqual(
      JSON.stringify({
        connector: mockConnectors,
        run: mockRunSettings,
      }),
    );
  });
});
